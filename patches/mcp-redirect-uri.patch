diff --git a/src/mcp/server/auth/handlers/authorize.py b/src/mcp/server/auth/handlers/authorize.py
index 8f37689..90282c9 100644
--- a/src/mcp/server/auth/handlers/authorize.py
+++ b/src/mcp/server/auth/handlers/authorize.py
@@ -29,7 +29,7 @@ logger = logging.getLogger(__name__)
 class AuthorizationRequest(BaseModel):
     # See https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1
     client_id: str = Field(..., description="The client ID")
-    redirect_uri: AnyHttpUrl | None = Field(
+    redirect_uri: AnyUrl | None = Field(
         None, description="URL to redirect to after authorization"
     )
 
@@ -68,8 +68,8 @@ def best_effort_extract_string(
     return None
 
 
-class AnyHttpUrlModel(RootModel[AnyHttpUrl]):
-    root: AnyHttpUrl
+class AnyHttpUrlModel(RootModel[AnyUrl]):
+    root: AnyUrl
 
 
 @dataclass
diff --git a/src/mcp/server/auth/handlers/token.py b/src/mcp/server/auth/handlers/token.py
index 94a5c4d..5e8fe4c 100644
--- a/src/mcp/server/auth/handlers/token.py
+++ b/src/mcp/server/auth/handlers/token.py
@@ -4,7 +4,7 @@ import time
 from dataclasses import dataclass
 from typing import Annotated, Any, Literal
 
-from pydantic import AnyHttpUrl, BaseModel, Field, RootModel, ValidationError
+from pydantic import AnyUrl, BaseModel, Field, RootModel, ValidationError
 from starlette.requests import Request
 
 from mcp.server.auth.errors import (
@@ -27,7 +27,7 @@ class AuthorizationCodeRequest(BaseModel):
     # See https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3
     grant_type: Literal["authorization_code"]
     code: str = Field(..., description="The authorization code")
-    redirect_uri: AnyHttpUrl | None = Field(
+    redirect_uri: AnyUrl | None = Field(
         None, description="Must be the same as redirect URI provided in /authorize"
     )
     client_id: str
@@ -68,7 +68,7 @@ class TokenErrorResponse(BaseModel):
 
     error: TokenErrorCode
     error_description: str | None = None
-    error_uri: AnyHttpUrl | None = None
+    error_uri: AnyUrl | None = None
 
 
 class TokenSuccessResponse(RootModel[OAuthToken]):
diff --git a/src/mcp/server/auth/provider.py b/src/mcp/server/auth/provider.py
index be1ac1d..aefb4f2 100644
--- a/src/mcp/server/auth/provider.py
+++ b/src/mcp/server/auth/provider.py
@@ -2,7 +2,7 @@ from dataclasses import dataclass
 from typing import Generic, Literal, Protocol, TypeVar
 from urllib.parse import parse_qs, urlencode, urlparse, urlunparse
 
-from pydantic import AnyHttpUrl, BaseModel
+from pydantic import AnyHttpUrl, AnyUrl, BaseModel
 
 from mcp.shared.auth import (
     OAuthClientInformationFull,
@@ -14,7 +14,7 @@ class AuthorizationParams(BaseModel):
     state: str | None
     scopes: list[str] | None
     code_challenge: str
-    redirect_uri: AnyHttpUrl
+    redirect_uri: AnyUrl
     redirect_uri_provided_explicitly: bool
 
 
@@ -24,7 +24,7 @@ class AuthorizationCode(BaseModel):
     expires_at: float
     client_id: str
     code_challenge: str
-    redirect_uri: AnyHttpUrl
+    redirect_uri: AnyUrl
     redirect_uri_provided_explicitly: bool
 
 
diff --git a/src/mcp/shared/auth.py b/src/mcp/shared/auth.py
index 22f8a97..7b51a1e 100644
--- a/src/mcp/shared/auth.py
+++ b/src/mcp/shared/auth.py
@@ -1,6 +1,6 @@
 from typing import Any, Literal
 
-from pydantic import AnyHttpUrl, BaseModel, Field
+from pydantic import AnyHttpUrl, AnyUrl, BaseModel, Field
 
 
 class OAuthToken(BaseModel):
@@ -32,7 +32,7 @@ class OAuthClientMetadata(BaseModel):
     for the full specification.
     """
 
-    redirect_uris: list[AnyHttpUrl] = Field(..., min_length=1)
+    redirect_uris: list[AnyUrl] = Field(..., min_length=1)
     # token_endpoint_auth_method: this implementation only supports none &
     # client_secret_post;
     # ie: we do not support client_secret_basic
@@ -51,12 +51,12 @@ class OAuthClientMetadata(BaseModel):
     # these fields are currently unused, but we support & store them for potential
     # future use
     client_name: str | None = None
-    client_uri: AnyHttpUrl | None = None
-    logo_uri: AnyHttpUrl | None = None
+    client_uri: AnyUrl | None = None
+    logo_uri: AnyUrl | None = None
     contacts: list[str] | None = None
-    tos_uri: AnyHttpUrl | None = None
-    policy_uri: AnyHttpUrl | None = None
-    jwks_uri: AnyHttpUrl | None = None
+    tos_uri: AnyUrl | None = None
+    policy_uri: AnyUrl | None = None
+    jwks_uri: AnyUrl | None = None
     jwks: Any | None = None
     software_id: str | None = None
     software_version: str | None = None
@@ -71,7 +71,7 @@ class OAuthClientMetadata(BaseModel):
                 raise InvalidScopeError(f"Client was not registered with scope {scope}")
         return requested_scopes
 
-    def validate_redirect_uri(self, redirect_uri: AnyHttpUrl | None) -> AnyHttpUrl:
+    def validate_redirect_uri(self, redirect_uri: AnyUrl | None) -> AnyUrl:
         if redirect_uri is not None:
             # Validate redirect_uri against client's registered redirect URIs
             if redirect_uri not in self.redirect_uris:
@@ -122,8 +122,8 @@ class OAuthMetadata(BaseModel):
     token_endpoint_auth_signing_alg_values_supported: None = None
     service_documentation: AnyHttpUrl | None = None
     ui_locales_supported: list[str] | None = None
-    op_policy_uri: AnyHttpUrl | None = None
-    op_tos_uri: AnyHttpUrl | None = None
+    op_policy_uri: AnyUrl | None = None
+    op_tos_uri: AnyUrl | None = None
     revocation_endpoint: AnyHttpUrl | None = None
     revocation_endpoint_auth_methods_supported: (
         list[Literal["client_secret_post"]] | None
